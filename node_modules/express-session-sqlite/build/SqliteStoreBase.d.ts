import session from 'express-session';
import { Database } from 'sqlite';
export interface SqliteStoreParams {
    /**
     * The sqlite3 Database driver to use
     */
    driver: any;
    /**
     * The path to the sqlite database.
     * For an in-memory database, specify ':memory:'.
     */
    path: string;
    /**
     * Session TTL in milliseconds
     */
    ttl: number;
    /**
     * Session id prefix. Default is no prefix
     */
    prefix?: string;
    /**
     * Triggers a timer in milliseconds to run a cleanup on expired session rows.
     * Default is 5 minutes.
     */
    cleanupInterval?: number;
}
export declare type AllSessionsResult = session.SessionData[] | {
    [sid: string]: session.SessionData;
} | null;
export declare class SqliteStoreBase {
    hasInit: boolean;
    config: SqliteStoreParams;
    db: Database;
    prefix: string;
    constructor(config: SqliteStoreParams);
    getSid(sid: string): string;
    init(): Promise<void>;
    get(sid: string): Promise<session.SessionData | null>;
    set(sid: string, session: session.SessionData): Promise<void>;
    destroy(sid: string): Promise<void>;
    all(): Promise<AllSessionsResult>;
    length(): Promise<number | null>;
    clear(): Promise<void>;
    touch(sid: string, session: session.SessionData): Promise<void>;
    /**
     * Have to manually call this to remove stale entries
     */
    removeExpiredSessions(): Promise<void>;
}
